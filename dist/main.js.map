{"version":3,"sources":["webpack://todo_app/./src/_Project.js","webpack://todo_app/./src/_Task.js","webpack://todo_app/webpack/bootstrap","webpack://todo_app/webpack/runtime/define property getters","webpack://todo_app/webpack/runtime/hasOwnProperty shorthand","webpack://todo_app/webpack/runtime/make namespace object","webpack://todo_app/./src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACde;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCRA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;ACNiC;AACN;AAC3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,oBAAoB,6CAAO;AAC3B;AACA;AACA;AACA,8BAA8B,0CAAI;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mGAAmG,cAAc;AACjH;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,WAAW;AAC5D,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oCAAoC;;AAEzD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6HAA6H,oCAAoC;AACjK;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","file":"main.js","sourcesContent":["export default class Project {\n  constructor(title) {\n    this.title = title;\n    this.tasks = [];\n  }\n  addTask(task) {\n    this.tasks.push(task);\n  }\n  removeTask(taskIndex) {\n    this.tasks.splice(taskIndex, 1);\n  }\n  //   editTask(task,taskIndex){\n  //     this.tasks.splice(taskIndex,1,task)\n  //   }\n}\n","export default class Task {\n  constructor(title, description, dueDate) {\n    this.title = title;\n    this.description = description;\n    this.dueDate = dueDate;\n    this.priority = \"normal\";\n    this.complete = false;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Project from \"./_Project\";\nimport Task from \"./_Task\";\nvar content = document.querySelector(\"#content\");\nvar projects = [];\n\n//? render function, displays inputfield and save button --that will be used to input and saving projects(by title) to global projects array;\nfunction render() {\n  content.innerHTML = `\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"><a class=\"navbar-brand\" href=\"#\"><i class=\"fas fa-clipboard-list\"></i> Todo List</a></nav>\n  <div class=\"container-fluid row\">\n  <div id=\"left-div\" class=\"col-sm-2 bg-light\">\n    <ul class=\"nav nav-pills flex-column\">\n      <li class=\"nav-item\">\n      <a class=\"nav-link active\" aria-current=\"page\" href=\"#\"><i class=\"fas fa-home\"></i> Home</a>\n      </li>\n      <li class=\"nav-item\">\n      <a class=\"nav-link\" href=\"#\"><i class=\"fas fa-calendar-day\"></i> Today</a>\n      </li>\n      <li class=\"nav-item\">\n      <a class=\"nav-link\" href=\"#\"><i class=\"fas fa-calendar-week\"></i> Week</a>\n      </li>\n    </ul>\n    <div>\n      <h3 class=\"display-6 my-3\">Projects</h3>\n          <div id=\"add-project-div\" class=\"d-flex mb-4\">\n          <input id=\"project\" type=\"text\" class=\"form-control ps-1\" placeholder=\"+ add project\">\n          <button id=\"save-project\" type=\"button\" class=\"btn btn-dark\">Save</button>\n          </div>\n      <ul id=\"list-for-projects\" class=\"nav nav-pills flex-column\">\n      </ul>\n    </div>\n  </div>\n  <div id=\"right-div\" class=\"col-sm-10\">\n    <div id=\"tasks-div\">\n      <table class=\"table table-hover\">\n        <thead>\n          <tr>\n          <th id=\"project-title\" scope=\"col\">Title</th>\n          <th scope=\"col\">Due Date</th>\n          <th scope=\"col\">Complete</th>\n          <th scope=\"col\">Edit</th>\n          <th scope=\"col\">Delete</th>\n          </tr>\n        </thead>\n      </table>\n   </div> \n  </div>\n</div>`;\n}\n\nrender();\n\n//?  makeProject function --is for storing projects inside a projects array\nfunction makeProject(title) {\n  projects.push(new Project(title));\n}\n//? makeTask function\nfunction makeTask(index, title, description = \"\", date = \"no date\") {\n  projects[index].addTask(new Task(title, description, date));\n  console.log(projects[index].tasks);\n}\n//?\n// function validateForm() {\n//   var val = document.querySelector(\"#task-title\");\n//   if (val == \"\") {\n\n//     return false;\n//   }\n// }\n//! DOM Stuff\n// onclick a project is created and stored in an array\n\nvar saveBtn = document.querySelector(\"#save-project\");\nsaveBtn.addEventListener(\"click\", function (e) {\n  if (document.querySelector(\"#project\").value != \"\") {\n    makeProject(document.querySelector(\"#project\").value);\n    document.querySelector(\"#project\").value = \"\";\n    renderProjects();\n  }\n});\n\n//TODO: render projects array items(if array is not empty) in a unordered list\n//! will render only when saveBtn is pressed(successfuly)\nfunction renderProjects() {\n  //* remove elments that might have been in the projects unordered list\n  var listForProjects = document.querySelector(\"#list-for-projects\");\n  while (listForProjects.childElementCount > 0) {\n    listForProjects.lastChild.remove();\n  }\n\n  //* create li that will be appended to projects unordered list\n  //! li should look like this <li data-index=\"should match same index as projects array\">project-title</li>\n  projects.forEach((project, index) => {\n    let listItem = document.createElement(\"li\");\n    listItem.classList.add(\"nav-item\");\n    listItem.innerHTML = `<a class=\"nav-link project-item\" href=\"#\"><i class=\"fas fa-tasks\"></i> ${project.title}</a>`;\n    listItem.setAttribute(\"data-project-index\", index);\n    listForProjects.appendChild(listItem);\n  });\n}\n\n//TODO: render tasks array items(if array is not empty) in a unordered list\n//! will render only when project list item is clicked\nvar tableData = document.querySelector(\"table\");\nfunction renderTasks(index) {\n  //* remove elments that might have been in the projects unordered list\n  while (tableData.childElementCount > 1) {\n    tableData.lastChild.remove();\n  }\n  //* create li that will be appended to projects unordered list\n  //! li should look like this <li data-index=\"should match same index as projects array\">project-title</li>\n  var tasksArray = projects[index].tasks;\n  //* adds tasks to list if tasks array is not empty, else a list item \"no tasks\" is added to task list\n  if (tasksArray.length != 0) {\n    tasksArray.forEach((task, index) => {\n      let tr = document.createElement(\"tbody\");\n      tr.innerHTML = `\n      <tr>\n      <th class=\"task-title\" scope=\"row\"><span>${task.title}</span></th>\n      <td class=\"task-duedate\">${task.dueDate}</td>\n      <td class=\"task-complete\"><button class=\"comp-btn btn\"><i class=\"fas fa-check\"></i></button></td>\n      <td class=\"task-edit\"><button class=\"edit-btn btn\"><i class=\"far fa-edit\"></i></button></td>\n      <td class=\"task-delete\"><button class=\"del-btn btn\"><i class=\"fas fa-trash-alt\"></i></button></td></tr>`;\n      tr.setAttribute(\"data-task-index\", index);\n      tableData.appendChild(tr);\n    });\n  }\n}\n\n// onclick display tasks\nvar listForProjects = document.querySelector(\"#list-for-projects\");\nvar tasksDiv = document.querySelector(\"#tasks-div\");\n// ! a global variable that will keep track of my current project's index\nvar currentProjectIndex;\nlistForProjects.addEventListener(\"click\", function (e) {\n  if (e.target.classList.contains(\"project-item\")) {\n    currentProjectIndex = e.target.parentElement.getAttribute(\n      \"data-project-index\"\n    );\n    // *remove task form\n    if (tasksDiv.lastElementChild.nodeName == \"FORM\") {\n      tasksDiv.lastElementChild.remove();\n    }\n    //* create a input field and a save btn for saving tasks in a project\n    if (tasksDiv.lastElementChild.id != \"add-task-btn\") {\n      let addTaskBtn = document.createElement(\"button\");\n      addTaskBtn.id = \"add-task-btn\";\n      addTaskBtn.classList.add(\"btn\", \"btn-light\");\n      addTaskBtn.innerText = \"+ Add Task\";\n      tasksDiv.append(addTaskBtn);\n    }\n    //*display project title when project item is clicked\n    document.querySelector(\n      \"#project-title\"\n    ).innerText = `${projects[currentProjectIndex].title}`;\n\n    // TODO: add evenlistener to  save-task button,\n    //* render tasks from tasks array inside project object instace\n    renderTasks(currentProjectIndex);\n  }\n});\n//* tasks form save-task-btn\ntasksDiv.addEventListener(\"click\", function (e) {\n  if (e.target.id == \"save-task\") {\n    if (document.querySelector(\"#task-title\").value != \"\") {\n      makeTask(\n        currentProjectIndex,\n        document.querySelector(\"#task-title\").value,\n        document.querySelector(\"#task-description\").value,\n        document.querySelector(\"#task-duedate\").value\n      );\n      //! replace task form with add task btn\n      let addTaskBtn = document.createElement(\"button\");\n      addTaskBtn.id = \"add-task-btn\";\n      addTaskBtn.classList.add(\"btn\", \"btn-light\");\n      addTaskBtn.innerText = \"+ Add Task\";\n      tasksDiv.replaceChild(addTaskBtn, tasksDiv.lastElementChild);\n      renderTasks(currentProjectIndex);\n    } else {\n      alert(\"Title must be filled out\");\n    }\n  }\n});\n//* tasks form cancel-task-btn\ntasksDiv.addEventListener(\"click\", function (e) {\n  if (e.target.id == \"cancel\") {\n    let addTaskBtn = document.createElement(\"button\");\n    addTaskBtn.id = \"add-task-btn\";\n    addTaskBtn.classList.add(\"btn\", \"btn-light\");\n    addTaskBtn.innerText = \"+ Add Task\";\n    tasksDiv.replaceChild(addTaskBtn, tasksDiv.lastElementChild);\n    renderTasks(currentProjectIndex);\n  }\n});\n\n//TODO when element with a class containing navlink is clicked it must be active\n\n// * onclick, check if target is classList == nav-link,if nav-link remove active class from active link, add active class to target\nvar leftDiv = document.querySelector(\"#left-div\");\nleftDiv.addEventListener(\"click\", function (e) {\n  if (e.target.classList.contains(\"nav-link\")) {\n    let navLinks = document.querySelectorAll(\".nav-link\");\n    navLinks.forEach((element) => {\n      if (element.classList.contains(\"active\")) {\n        element.classList.remove(\"active\");\n      }\n    });\n    e.target.classList.add(\"active\");\n  }\n});\n\n//TODO when add-task-btn is clicked, add-task-btn should disappear and its place task form should appear\nvar rightDiv = document.querySelector(\"#right-div\");\nrightDiv.addEventListener(\"click\", function (e) {\n  if (e.target.id == \"add-task-btn\") {\n    let taskForm = document.createElement(\"form\");\n    taskForm.setAttribute(\"submit\", \"return false\");\n    taskForm.innerHTML = `\n          <div id=\"form-main\" class=\"row\">\n            <input id=\"task-title\" type=\"text\" class=\"col-sm-12 form-control mb-2\" placeholder=\"Title\">\n            <textarea id=\"task-description\" class=\"col-sm-12 form-control mb-2\" rows=\"3\" placeholder=\"Description\"></textarea>\n                  <input id=\"task-duedate\" type=\"date\" class=\"col-sm-4\" autocomplete=\"off\"> <span class=\"my-auto col-sm-8\">${projects[currentProjectIndex].title}</span>\n          </div>\n          <div id=\"form-footer\" class=\"row mt-2\">\n            <button id=\"save-task\" type=\"submit\" class=\"col btn btn-primary\">save</button> <button id=\"cancel\" class=\"col btn btn-danger\">cancel</button>\n          </div>\n    `;\n    e.target.parentElement.replaceChild(taskForm, e.target);\n  }\n});\n"],"sourceRoot":""}